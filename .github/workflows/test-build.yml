---
name: Build Changed Nix Packages

on:
  pull_request:
    branches: [main]
    paths:
      - "pkgs/**"
      - "flake.nix"
jobs:
  build:
    name: Build on ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            arch: Intel
          - os: macos-14
            arch: AppleSilicon

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0 # Ensures full history so diff with origin/main works

      - name: Fetch base branch (main)
        run: git fetch origin ${{ github.base_ref }}

      - name: Install Nix
        uses: cachix/install-nix-action@v22
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Check flake formatting
        run: |
          export NIXPKGS_ALLOW_UNFREE=1
          nix flake check --impure

      - name: Build only changed packages
        run: |
          set -euo pipefail
          export NIXPKGS_ALLOW_UNFREE=1

          # Debugging: Show all changed files
          echo "All changed files:"
          git diff --name-only origin/${{ github.base_ref }}...HEAD

          # Use safer grep pattern and handle no matches gracefully
          changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '^pkgs/[^/]+/default\.nix$' || true)

          if [ -z "$changed_files" ]; then
            echo "‚úÖ No package default.nix files changed."
            
            # Check if flake.nix changed, as it might affect all packages
            if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "^flake.nix$"; then
              echo "‚ö†Ô∏è flake.nix changed, but no specific package default.nix files."
              # Could add specific handling for flake.nix changes here if needed
            fi
            
            exit 0
          fi

          # Show detected changed packages
          echo "Changed packages:"
          echo "$changed_files" | cut -d/ -f2 | sort -u

          # Build each changed package and track failures
          failed_pkgs=""
          for pkg in $(echo "$changed_files" | cut -d/ -f2 | sort -u); do
            echo "üî® Building changed package: $pkg"
            if nix build .#${pkg} --impure; then
              echo "‚úÖ Successfully built $pkg"
            else
              echo "‚ùå Failed to build $pkg"
              failed_pkgs="$failed_pkgs $pkg"
            fi
          done

          # Report build results
          if [ -n "$failed_pkgs" ]; then
            echo "‚ùå Some packages failed to build:$failed_pkgs"
            exit 1
          else
            echo "‚úÖ All changed packages built successfully"
          fi
